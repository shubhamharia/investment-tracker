===============================================================================
DOCKER CSV IMPORT FIX - COMPLETE SOLUTION
===============================================================================

PROBLEM SUMMARY:
- Backend container imports CSV successfully 
- Holdings creation fails with portfolio_id=NULL constraint violation
- Missing default portfolio assignment for imported transactions
- PortfolioService.calculate_holdings() method was incomplete

SOLUTION IMPLEMENTED:
- Added portfolio creation during CSV import
- Fixed Transaction model to properly assign portfolio_id  
- Enhanced PortfolioService with working calculate_holdings method
- Added default user and portfolio creation for imports

===============================================================================
SOLUTION 1: REBUILD WITH FIXES (RECOMMENDED)
===============================================================================

Step 1: Stop all services
--------------------------
cd ~/investment-tracker
docker-compose down

Step 2: Rebuild backend container with fixes
--------------------------------------------
docker-compose build --no-cache backend

Step 3: Start all services
--------------------------
docker-compose up -d

Step 4: Wait for services to be healthy (30 seconds)
----------------------------------------------------
sleep 30

Step 5: Check service status
----------------------------
docker-compose ps

Expected output:
investment-tracker_backend_1   Up (healthy)
investment-tracker_db_1        Up (healthy) 
investment-tracker_redis_1     Up (healthy)

Step 6: Test import with fixed code
-----------------------------------
docker-compose exec backend python import_data.py import

Expected output should show:
- Using portfolio: Imported Transactions (ID: X)
- Processing X transactions...
- Recalculating holdings...
- Holdings calculated successfully
- Imported X transactions successfully

Step 7: Verify the import worked
--------------------------------
docker-compose exec backend python -c "
from app import create_app, db
from app.models import Transaction, Security, Platform, Portfolio, Holding
app = create_app()
with app.app_context():
    print(f'Portfolios: {Portfolio.query.count()}')
    print(f'Transactions: {Transaction.query.count()}')
    print(f'Holdings: {Holding.query.count()}')
    print(f'Securities: {Security.query.count()}')
    print(f'Platforms: {Platform.query.count()}')
"

===============================================================================
SOLUTION 2: QUICK DATABASE RESET (IF NEEDED)
===============================================================================

If you have partial data and want to start fresh:

Step 1: Reset database completely
---------------------------------
docker-compose down -v
docker-compose up -d

Step 2: Wait and test import
----------------------------
sleep 30
docker-compose exec backend python import_data.py import

===============================================================================
WHAT WAS FIXED
===============================================================================

1. PORTFOLIO CREATION:
   - Import now creates default user: import@system.local
   - Creates default portfolio: "Imported Transactions"
   - All transactions assigned to this portfolio

2. HOLDINGS CALCULATION:
   - Fixed PortfolioService.calculate_holdings() method
   - Properly groups transactions by platform and security
   - Calculates average cost and total holdings
   - Handles BUY/SELL transactions correctly

3. DATABASE CONSTRAINTS:
   - All holdings now have valid portfolio_id
   - No more NULL constraint violations
   - Proper foreign key relationships

4. TRANSACTION IMPORT:
   - Each transaction assigned to default portfolio
   - Duplicate detection includes portfolio_id
   - Better error handling and reporting

===============================================================================
VERIFICATION COMMANDS
===============================================================================

Check container status:
----------------------
docker-compose ps

Check logs if something fails:
------------------------------
docker-compose logs backend --tail=20

Check imported data after successful import:
--------------------------------------------
docker-compose exec backend python -c "
from app import create_app, db
from app.models import Transaction, Security, Platform, Portfolio, Holding, User
app = create_app()
with app.app_context():
    print('=== IMPORT SUMMARY ===')
    print(f'Users: {User.query.count()}')
    print(f'Portfolios: {Portfolio.query.count()}')
    print(f'Transactions: {Transaction.query.count()}')
    print(f'Holdings: {Holding.query.count()}')
    print(f'Securities: {Security.query.count()}')
    print(f'Platforms: {Platform.query.count()}')
    
    print('\n=== PORTFOLIO DETAILS ===')
    for portfolio in Portfolio.query.all():
        print(f'Portfolio: {portfolio.name} (ID: {portfolio.id})')
        print(f'  Transactions: {Transaction.query.filter_by(portfolio_id=portfolio.id).count()}')
        print(f'  Holdings: {Holding.query.filter_by(portfolio_id=portfolio.id).count()}')
"

Test API health endpoint:
------------------------
curl http://localhost:5000/api/health

Test securities endpoint (after import):
----------------------------------------
curl http://localhost:5000/api/securities

Check specific portfolio holdings:
---------------------------------
docker-compose exec backend python -c "
from app import create_app, db
from app.models import Portfolio, Holding
app = create_app()
with app.app_context():
    portfolio = Portfolio.query.filter_by(name='Imported Transactions').first()
    if portfolio:
        holdings = Holding.query.filter_by(portfolio_id=portfolio.id).all()
        print(f'Portfolio: {portfolio.name}')
        print(f'Holdings count: {len(holdings)}')
        for holding in holdings[:5]:  # Show first 5
            print(f'  {holding.security.symbol}: {holding.quantity} @ {holding.average_cost} {holding.currency}')
"

===============================================================================
TROUBLESHOOTING
===============================================================================

If "ModuleNotFoundError: No module named 'fakeredis'":
------------------------------------------------------
- The fakeredis package was added to requirements.txt
- Run: docker-compose build --no-cache backend

If still getting portfolio_id constraint errors:
-----------------------------------------------
- Reset database: docker-compose down -v && docker-compose up -d
- Wait 30 seconds then retry import

If container exits with code 3:
-------------------------------
- Check logs: docker-compose logs backend
- Usually means missing dependencies or config issues
- Rebuild: docker-compose build --no-cache backend

If CSV import says "file not found":
------------------------------------
- File should be at ./data/combined_transactions_updated.csv on host
- Should be mounted at /app/data/combined_transactions_updated.csv in container
- Check volume mount: docker-compose exec backend ls -la /app/data/

If services won't start:
-----------------------
- Check system resources: free -h && df -h
- Clean up: docker system prune
- Restart Docker: sudo systemctl restart docker

If import completes but no holdings created:
-------------------------------------------
- Check if portfolio was created: See verification commands above
- Look for transaction processing errors in logs
- Verify CSV data format matches expected columns

===============================================================================
COMPLETE RESET (IF EVERYTHING FAILS)
===============================================================================

Complete clean restart:
----------------------
docker-compose down -v
docker system prune -f
docker-compose build --no-cache
docker-compose up -d
sleep 30
docker-compose ps
docker-compose exec backend python import_data.py import

===============================================================================
SUCCESS INDICATORS
===============================================================================

✅ All services show "Up (healthy)" status
✅ Import shows "Using portfolio: Imported Transactions (ID: X)"
✅ Import shows "Holdings calculated successfully"
✅ No portfolio_id constraint violation errors
✅ Verification commands show transactions, holdings, and portfolios
✅ API endpoints return data (not just empty arrays)

===============================================================================
NEXT STEPS AFTER SUCCESS
===============================================================================

1. Your transactions are now imported into "Imported Transactions" portfolio
2. Holdings have been calculated automatically
3. Create user accounts via API to access the data
4. Create additional portfolios and reorganize transactions as needed
5. Set up regular data backups
6. Test the web interface (if frontend is set up)

===============================================================================
SUPPORT FILES
===============================================================================

See also:
- DOCKER_TESTING_README.md (comprehensive testing guide)
- RASPBERRY_PI_DEPLOYMENT.md (deployment-specific info)
- README.md (general project info)

===============================================================================